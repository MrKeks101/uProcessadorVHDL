LDS R1, #33     0001 001 000 100001  -- UPPER BOUND
LDX R2, #2      0001 010 000 000010  -- BASIC COUNTER	
LDY R3, #1      0001 011 000000 001  -- INDEX


4: -- LOAD VALUES 2 TO 32

LDX [R2], R2    0111 01 0000 010 010 -- ADD X TO X VALUE
ADC R2, R3      0011 010 011 000000  -- X + 1

CMP R2, R1      0101 010 001 000000  -- CHECKS IF COUNTER IS NOT AT 32 ADDRESS
BCS 11, 4      1101 11 000 0000100  -- CREATES JUMP LOOP


LDX R2, #4      0001 010 000000 100  -- RESETS COUNTER
LDY R3, #2      0001 011 000000 010  -- NEW INDEX (MULTIPLES OF 2)

11: -- ELIMINATE MULTIPLES OF 2

LDX [R2], R0    0111 01 0000 010 000 -- ZERO CURRENT ADDRESS (MULTIPLES OF 2) 
ADC R2, R3      0011 010 011 000000  -- NEXT MULTIPLE OF 2 ADDRESS

CMP R2, R1      0101 010 001 000000  -- CHECKS IF COUNTER IS NOT AT 32 ADDRESS
BCS 11, 11     1101 11 000 0001011  -- CREATES JUMP LOOP


LDX R2, #6      0001 010 000000110   -- RESETS COUNTER
LDY R3, #3      0001 011 000000011   -- NEW INDEX (MULTIPLES OF 3)

18: -- ELIMINATE MULTIPLES OF 3

LDX [R2], R0    0111 01 0000 010 000 -- ZERO CURRENT ADDRESS (MULTIPLES OF 3) 
ADC R2, R3      0011 010 011 000000  -- NEXT MULTIPLE OF 3 ADDRESS

CMP R2, R1      0101 010 001 000000  -- CHECKS IF COUNTER IS NOT AT 32 ADDRESS
BCS 11, 18     1101 11 000 0010010  -- CREATES JUMP LOOP


LDX R2, #10     0001 010 000001010   -- RESETS COUNTER
LDY R3, #5      0001 011 000000101   -- NEW INDEX (MULTIPLES OF 5)

25: -- ELIMINATE MULTIPLES OF 5

LDX [R2], R0    0111 01 0000 010 000 -- ZERO CURRENT ADDRESS (MULTIPLES OF 5) 
ADC R2, R3      0011 010 011 000000  -- NEXT MULTIPLE OF 5 ADDRESS

CMP R2, R1      0101 010 001 000000  -- CHECKS IF COUNTER IS NOT AT 32 ADDRESS
BCS 11, 25     1101 11 000 0011001  -- CREATES JUMP LOOP


LDS R1, #32     0001 001 000100000
LDX R2, #2      0001 010 000000010
LDY R3, #1      0001 011 000000001

33: -- READ RAM 2 TO 32

LDY R4, [R2]    1000 100 010 000000  -- READS AT R2
ADC R2, R3      0011 010 011 000000  -- GOES TO NEXT RAM POSITION

SBC R4, R0      0100 100 000 000000  -- CHECKS IF R4 IS DIFFERENT FROM 0
BCS 10, 40     1101 10 000 0101000  -- IF IT IS, JMP TO 40

CMP R1, R2      0101 001 010 000000  -- CHECKS IF 32 HAS BEEN PASSED
BCS 11, 127    1101 11 000 1111111 -- IF IT IS END PROGRAM
JMP 33         1111 00000 0100001 -- GOES BACK TO LOOP AT 33

40: -- SEND ALL RESULTS TO R7	
LDA R7, R4      0001 111 100 000000     
JMP 33         1111 00000 0100001